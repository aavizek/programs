class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if((m+n)%2 == 0){
            return ((double)findKthSmallest(nums1, 0, nums2, 0, (m+n)/2) + findKthSmallest(nums1, 0, nums2, 0, (m+n)/2+1)) / 2;
        }else{
            return findKthSmallest(nums1, 0, nums2, 0, (m+n)/2+1);
        }
    }
    private int findKthSmallest(int[] nums1, int left1, int[] nums2, int left2, int k){
        if(left1 >= nums1.length){
            return nums2[left2 + k - 1];
        }
        if(left2 >= nums2.length){
            return nums1[left1 + k - 1];
        }
        if(k == 1){
            return Math.min(nums1[left1], nums2[left2]);
        }
        int mid1 = left1 + k/2 - 1 ;
        int mid2 = left2 + k/2 - 1;
        int val1 = mid1 >= nums1.length ? Integer.MAX_VALUE : nums1[left1 + k/2 - 1];
        int val2 = mid2 >= nums2.length ? Integer.MAX_VALUE : nums2[left2 + k/2 - 1];
        if(val1 <= val2){
            return findKthSmallest(nums1, mid1+1, nums2, left2, k-k/2);
        }else{
            return findKthSmallest(nums1, left1, nums2, mid2+1, k-k/2);
        }
    }
}
